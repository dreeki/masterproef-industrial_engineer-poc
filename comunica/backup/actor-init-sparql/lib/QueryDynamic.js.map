{"version":3,"file":"QueryDynamic.js","sourceRoot":"","sources":["QueryDynamic.ts"],"names":[],"mappings":";;AAAA,6CAAiE;AAGjE;;;;;;GAMG;AACH,SAAgB,qBAAqB,CAAC,OAAsB,EAAE,cAAsB,EAC9C,iBAAyB;IAC7D,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE;QAC3B,mEAAmE;QACnE,OAAO,CAAC,cAAc,GAAG,cAAc,CAAC;KACzC;IACD,MAAM,iBAAiB,GAAW,OAAO,CAAC,iBAAiB,IAAI,iBAAiB,CAAC;IACjF,MAAM,WAAW,GAAW,OAAO,CAAC,WAAW,IAAI,yBAAyB,CAAC;IAE7E,iFAAiF;IACjF,qDAAqD;IACrD,MAAM,iBAAiB,GAAW,OAAO,CAAC,iBAAiB,IAAI,iBAAiB,CAAC;IAEjF,yDAAyD;IACzD,MAAM,UAAU,GAAG,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC;IAClF,OAAO,cAAK,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,UAAU,EAAE,OAAO,CAAC;SACzF,IAAI,CAAC,CAAC,MAAc,EAAE,EAAE;QACvB,IAAI,KAAK,GAAG,IAAI,CAAC;QACjB,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,MAAM,EAAE;YACxC,IAAI,YAAY,CAAC,IAAI,KAAK,WAAW,EAAE;gBACrC,KAAK,GAAS,YAAY,CAAC;aAC5B;SACF;QACD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,gDAAgD,GAAG,WAAW,GAAG,eAAe;kBAC5F,iBAAiB,GAAG,IAAI,CAAC,CAAC;SAC/B;QACD,OAAO,KAAK,CAAC;IACf,CAAC,CAAC,CAAC;AACP,CAAC;AA7BD,sDA6BC","sourcesContent":["import {ISetupProperties, Runner, Setup} from \"@comunica/runner\";\nimport {ActorInitSparql} from \"./ActorInitSparql\";\n\n/**\n * Create a new dynamic comunica engine.\n * @param {IQueryOptions} options Optional options on how to instantiate the query evaluator.\n * @param {string} moduleRootPath The path to the invoking module.\n * @param {string} defaultConfigPath The path to the config file.\n * @return {Promise<ActorInitSparql>} A promise that resolves to a fully wired comunica engine.\n */\nexport function newEngineDynamicArged(options: IQueryOptions, moduleRootPath: string,\n                                      defaultConfigPath: string): Promise<ActorInitSparql> {\n  if (!options.mainModulePath) {\n    // This makes sure that our configuration is found by Components.js\n    options.mainModulePath = moduleRootPath;\n  }\n  const configResourceUrl: string = options.configResourceUrl || defaultConfigPath;\n  const instanceUri: string = options.instanceUri || 'urn:comunica:sparqlinit';\n\n  // Instantiate the main runner so that all other actors are instantiated as well,\n  // and find the SPARQL init actor with the given name\n  const runnerInstanceUri: string = options.runnerInstanceUri || 'urn:comunica:my';\n\n  // this needs to happen before any promise gets generated\n  const rootAction = { argv: process.argv, env: process.env, stdin: process.stdin };\n  return Setup.instantiateComponent(configResourceUrl, runnerInstanceUri, rootAction, options)\n    .then((runner: Runner) => {\n      let actor = null;\n      for (const runningActor of runner.actors) {\n        if (runningActor.name === instanceUri) {\n          actor = <any> runningActor;\n        }\n      }\n      if (!actor) {\n        throw new Error('No SPARQL init actor was found with the name \"' + instanceUri + '\" in runner \"'\n          + runnerInstanceUri + '\".');\n      }\n      return actor;\n    });\n}\n\n/**\n * Options for configuring how the query evaluator must be instantiated.\n */\nexport interface IQueryOptions extends ISetupProperties {\n  /**\n   * The URL or local path to a Components.js config file.\n   */\n  configResourceUrl?: string;\n  /**\n   * A URI identifying the component to instantiate.\n   */\n  instanceUri?: string;\n  /**\n   * A URI identifying the runner component.\n   */\n  runnerInstanceUri?: string;\n}\n"]}