{"version":3,"file":"ActorInitSparql-browser.js","sourceRoot":"","sources":["ActorInitSparql-browser.ts"],"names":[],"mappings":"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","sourcesContent":["import {IActorContextPreprocessOutput} from \"@comunica/bus-context-preprocess\";\nimport {IActionHttpInvalidate, IActorHttpInvalidateOutput} from \"@comunica/bus-http-invalidate\";\nimport {ActorInit, IActionInit, IActorOutputInit} from \"@comunica/bus-init\";\nimport {\n  IActionOptimizeQueryOperation,\n  IActorOptimizeQueryOperationOutput,\n} from \"@comunica/bus-optimize-query-operation\";\nimport {\n  Bindings,\n  ensureBindings,\n  IActionQueryOperation,\n  IActorQueryOperationOutput,\n  KEY_CONTEXT_BASEIRI,\n  KEY_CONTEXT_QUERY_TIMESTAMP,\n} from \"@comunica/bus-query-operation\";\nimport {IDataSource, KEY_CONTEXT_SOURCES} from \"@comunica/bus-rdf-resolve-quad-pattern\";\nimport {IActionSparqlParse, IActorSparqlParseOutput} from \"@comunica/bus-sparql-parse\";\nimport {\n  IActionRootSparqlParse,\n  IActionSparqlSerialize,\n  IActorOutputRootSparqlParse,\n  IActorSparqlSerializeOutput,\n  IActorTestRootSparqlParse,\n} from \"@comunica/bus-sparql-serialize\";\nimport {ActionContext, Actor, IAction, IActorArgs, IActorTest, KEY_CONTEXT_LOG, Logger, Mediator} from \"@comunica/core\";\nimport {AsyncReiterableArray} from \"asyncreiterable\";\nimport * as RDF from \"rdf-js\";\nimport {termToString} from \"rdf-string\";\nimport {QUAD_TERM_NAMES} from \"rdf-terms\";\nimport {Algebra} from \"sparqlalgebrajs\";\n\n/**\n * A browser-safe comunica SPARQL Init Actor.\n */\nexport class ActorInitSparql extends ActorInit implements IActorInitSparqlArgs {\n\n  private static ALGEBRA_TYPES: {[type: string]: boolean} = Object.keys(Algebra.types)\n    .reduce((acc: {[type: string]: boolean}, key) => { acc[(<any> Algebra.types)[key]] = true; return acc; }, {});\n\n  public readonly mediatorOptimizeQueryOperation: Mediator<Actor<IActionOptimizeQueryOperation, IActorTest,\n    IActorOptimizeQueryOperationOutput>, IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput>;\n  public readonly mediatorQueryOperation: Mediator<Actor<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>,\n    IActionQueryOperation, IActorTest, IActorQueryOperationOutput>;\n  public readonly mediatorSparqlParse: Mediator<Actor<IActionSparqlParse, IActorTest, IActorSparqlParseOutput>,\n    IActionSparqlParse, IActorTest, IActorSparqlParseOutput>;\n  public readonly mediatorSparqlSerialize: Mediator<Actor<IActionRootSparqlParse, IActorTestRootSparqlParse,\n    IActorOutputRootSparqlParse>, IActionRootSparqlParse, IActorTestRootSparqlParse, IActorOutputRootSparqlParse>;\n  public readonly mediatorSparqlSerializeMediaTypeCombiner: Mediator<Actor<IActionRootSparqlParse,\n    IActorTestRootSparqlParse, IActorOutputRootSparqlParse>, IActionRootSparqlParse, IActorTestRootSparqlParse,\n    IActorOutputRootSparqlParse>;\n  public readonly mediatorContextPreprocess: Mediator<Actor<IAction, IActorTest,\n    IActorContextPreprocessOutput>, IAction, IActorTest, IActorContextPreprocessOutput>;\n  public readonly mediatorHttpInvalidate: Mediator<Actor<IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>,\n    IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>;\n  public readonly logger: Logger;\n  public readonly queryString?: string;\n  public readonly defaultQueryInputFormat?: string;\n  public readonly context?: string;\n  public readonly contextKeyShortcuts: {[shortcut: string]: string};\n\n  constructor(args: IActorInitSparqlArgs) {\n    super(args);\n  }\n\n  /**\n   * Create a copy of the given operation in which all given bindings are applied.\n   * The bindings are applied to all quad patterns and path expressions.\n   *\n   * @param {Operation} operation An operation.\n   * @param {Bindings} initialBindings Bindings to apply.\n   * @return {Operation} A copy of the given operation where all given bindings are applied.\n   */\n  public static applyInitialBindings(operation: Algebra.Operation, initialBindings: Bindings): Algebra.Operation {\n    const copiedOperation: Algebra.Operation = <any> {};\n    for (const key of Object.keys(operation)) {\n      if (Array.isArray(operation[key])) {\n        if (key === 'variables') {\n          copiedOperation[key] = operation[key].filter(\n            (variable: RDF.Variable) => !initialBindings.has(termToString(variable)));\n        } else {\n          copiedOperation[key] = operation[key].map(\n            (subOperation: Algebra.Operation) => ActorInitSparql.applyInitialBindings(subOperation, initialBindings));\n        }\n      } else if (operation[key] && ActorInitSparql.ALGEBRA_TYPES[operation[key].type]) {\n        copiedOperation[key] = ActorInitSparql.applyInitialBindings(operation[key], initialBindings);\n      } else {\n        copiedOperation[key] = operation[key];\n      }\n\n      if (operation.type === Algebra.types.PATTERN || operation.type === Algebra.types.PATH) {\n        for (const quadTerm of QUAD_TERM_NAMES) {\n          if (!(operation.type === Algebra.types.PATH && quadTerm === 'predicate')) {\n            const term: RDF.Term = operation[quadTerm];\n            if (term.termType === 'Variable') {\n              const termString: string = termToString(term);\n              const binding: RDF.Term = initialBindings.get(termString);\n              if (binding) {\n                copiedOperation[quadTerm] = binding;\n              }\n            }\n          }\n        }\n      }\n    }\n    return copiedOperation;\n  }\n\n  public async test(action: IActionInit): Promise<IActorTest> {\n    return true;\n  }\n\n  /**\n   * Evaluate the given query\n   * @param {string | Algebra.Operation} query A query string or algebra.\n   * @param context An optional query context.\n   * @return {Promise<IActorQueryOperationOutput>} A promise that resolves to the query output.\n   */\n  public async query(query: string | Algebra.Operation, context?: any): Promise<IActorQueryOperationOutput> {\n    context = context || {};\n\n    // Expand shortcuts\n    for (const key in context) {\n      if (this.contextKeyShortcuts[key]) {\n        const existingEntry = context[key];\n        context[this.contextKeyShortcuts[key]] = existingEntry;\n        delete context[key];\n      }\n    }\n\n    // Set the default logger if none is provided\n    if (!context[KEY_CONTEXT_LOG]) {\n      context[KEY_CONTEXT_LOG] = this.logger;\n    }\n\n    if (!context[KEY_CONTEXT_QUERY_TIMESTAMP]) {\n      context[KEY_CONTEXT_QUERY_TIMESTAMP] = new Date();\n    }\n\n    // Ensure sources are an async re-iterable\n    if (Array.isArray(context[KEY_CONTEXT_SOURCES])) {\n      // TODO: backwards compatibility\n      context[KEY_CONTEXT_SOURCES].map((source: IDataSource) => {\n        if (typeof source !== 'string' && (source.type === 'auto' || source.type === 'hypermedia')) {\n          delete source.type;\n        }\n      });\n      context[KEY_CONTEXT_SOURCES] = AsyncReiterableArray.fromFixedData(context[KEY_CONTEXT_SOURCES]);\n    }\n\n    // Prepare context\n    context = ActionContext(context);\n    let queryFormat: string = 'sparql';\n    if (context && context.has(KEY_CONTEXT_QUERYFORMAT)) {\n      queryFormat = context.get(KEY_CONTEXT_QUERYFORMAT);\n      context = context.delete(KEY_CONTEXT_QUERYFORMAT);\n      if (queryFormat === 'graphql' && !context.has(KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES)) {\n        context = context.set(KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES, {});\n      }\n    }\n    let baseIRI: string;\n    if (context && context.has(KEY_CONTEXT_BASEIRI)) {\n      baseIRI = context.get(KEY_CONTEXT_BASEIRI);\n    }\n\n    // Pre-processing the context\n    context = (await this.mediatorContextPreprocess.mediate({ context })).context;\n\n    // Parse query\n    let operation: Algebra.Operation;\n    if (typeof query === 'string') {\n      const queryParseOutput = await this.mediatorSparqlParse.mediate({ context, query, queryFormat, baseIRI });\n      operation = queryParseOutput.operation;\n      // Update the baseIRI in the context if the query modified it.\n      if (queryParseOutput.baseIRI) {\n        context = context.set(KEY_CONTEXT_BASEIRI, queryParseOutput.baseIRI);\n      }\n    } else {\n      operation = query;\n    }\n\n    // Apply initial bindings in context\n    if (context.has(KEY_CONTEXT_INITIALBINDINGS)) {\n      const bindings = context.get(KEY_CONTEXT_INITIALBINDINGS);\n      operation = ActorInitSparql.applyInitialBindings(operation, ensureBindings(bindings));\n    }\n\n    // Optimize the query operation\n    operation = (await this.mediatorOptimizeQueryOperation.mediate({ context, operation })).operation;\n\n    // Execute query\n    const resolve: IActionQueryOperation = { context, operation };\n    const output = await this.mediatorQueryOperation.mediate(resolve);\n    output.context = context;\n    return output;\n  }\n\n  /**\n   * @param context An optional context.\n   * @return {Promise<{[p: string]: number}>} All available SPARQL (weighted) result media types.\n   */\n  public async getResultMediaTypes(context: ActionContext): Promise<{[id: string]: number}> {\n    return (await this.mediatorSparqlSerializeMediaTypeCombiner.mediate({ context, mediaTypes: true })).mediaTypes;\n  }\n\n  /**\n   * Convert a query result to a string stream based on a certain media type.\n   * @param {IActorQueryOperationOutput} queryResult A query result.\n   * @param {string} mediaType A media type.\n   * @param {ActionContext} context An optional context.\n   * @return {Promise<IActorSparqlSerializeOutput>} A text stream.\n   */\n  public async resultToString(queryResult: IActorQueryOperationOutput, mediaType?: string, context?: any)\n  : Promise<IActorSparqlSerializeOutput> {\n    context = ActionContext(context);\n\n    if (!mediaType) {\n      switch (queryResult.type) {\n      case 'bindings':\n        mediaType = 'application/json';\n        break;\n      case 'quads':\n        mediaType = 'application/trig';\n        break;\n      default:\n        mediaType = 'simple';\n        break;\n      }\n    }\n    const handle: IActionSparqlSerialize = queryResult;\n    handle.context = context;\n    return (await this.mediatorSparqlSerialize.mediate({ context, handle, handleMediaType: mediaType })).handle;\n  }\n\n  /**\n   * Invalidate all internal caches related to the given page URL.\n   * If no page URL is given, then all pages will be invalidated.\n   * @param {string} url The page URL to invalidate.\n   * @return {Promise<any>} A promise resolving when the caches have been invalidated.\n   */\n  public invalidateHttpCache(url?: string): Promise<any> {\n    return this.mediatorHttpInvalidate.mediate({ url });\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    throw new Error('ActorInitSparql#run is not supported in the browser.');\n  }\n\n}\n\nexport interface IActorInitSparqlArgs extends IActorArgs<IActionInit, IActorTest, IActorOutputInit> {\n  mediatorOptimizeQueryOperation: Mediator<Actor<IActionOptimizeQueryOperation, IActorTest,\n    IActorOptimizeQueryOperationOutput>, IActionOptimizeQueryOperation, IActorTest, IActorOptimizeQueryOperationOutput>;\n  mediatorQueryOperation: Mediator<Actor<IActionQueryOperation, IActorTest, IActorQueryOperationOutput>,\n    IActionQueryOperation, IActorTest, IActorQueryOperationOutput>;\n  mediatorSparqlParse: Mediator<Actor<IActionSparqlParse, IActorTest, IActorSparqlParseOutput>,\n    IActionSparqlParse, IActorTest, IActorSparqlParseOutput>;\n  mediatorSparqlSerialize: Mediator<Actor<IActionRootSparqlParse, IActorTestRootSparqlParse,\n    IActorOutputRootSparqlParse>, IActionRootSparqlParse, IActorTestRootSparqlParse, IActorOutputRootSparqlParse>;\n  mediatorSparqlSerializeMediaTypeCombiner: Mediator<Actor<IActionRootSparqlParse,\n    IActorTestRootSparqlParse, IActorOutputRootSparqlParse>, IActionRootSparqlParse, IActorTestRootSparqlParse,\n    IActorOutputRootSparqlParse>;\n  mediatorContextPreprocess: Mediator<Actor<IAction, IActorTest, IActorContextPreprocessOutput>,\n    IAction, IActorTest, IActorContextPreprocessOutput>;\n  mediatorHttpInvalidate: Mediator<Actor<IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>,\n    IActionHttpInvalidate, IActorTest, IActorHttpInvalidateOutput>;\n  logger: Logger;\n  queryString?: string;\n  defaultQueryInputFormat?: string;\n  context?: string;\n  contextKeyShortcuts: {[shortcut: string]: string};\n}\n\nexport const KEY_CONTEXT_INITIALBINDINGS: string = '@comunica/actor-init-sparql:initialBindings';\nexport const KEY_CONTEXT_QUERYFORMAT: string = '@comunica/actor-init-sparql:queryFormat';\nexport const KEY_CONTEXT_GRAPHQL_SINGULARIZEVARIABLES: string = '@comunica/actor-init-sparql:singularizeVariables';\nexport const KEY_CONTEXT_LENIENT: string = '@comunica/actor-init-sparql:lenient';\n"]}