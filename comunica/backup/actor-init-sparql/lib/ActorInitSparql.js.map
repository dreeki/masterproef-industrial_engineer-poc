{"version":3,"file":"ActorInitSparql.js","sourceRoot":"","sources":["ActorInitSparql.ts"],"names":[],"mappings":";;AAAA,qEAAkE;AAClE,iEAA4F;AAE5F,uEAA8F;AAC9F,yFAA2E;AAC3E,2DAAqD;AACrD,iDAAmC;AACnC,2BAA4C;AAC5C,qCAAsC;AACtC,yBAAyB;AAEzB,uEAGmC;AAEnC,qEAImC;AAHjC,gEAAA,2BAA2B,CAAA;AAC3B,4DAAA,uBAAuB,CAAA;AACvB,wDAAA,mBAAmB,CAAA;AAGrB;;GAEG;AACH,MAAa,eAAgB,SAAQ,yCAAsB;IAEzD,YAAY,IAA0B;QACpC,KAAK,CAAC,IAAI,CAAC,CAAC;IACd,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,MAAmB;QAClC,MAAM,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;eAChG,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,CAAC,EAAE;YAC1F,4BAA4B;YAC5B,IAAI,IAAI,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,EAAE;gBAC1B,MAAM,eAAe,GAAW,OAAO,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC;gBACnE,MAAM,GAAG,GAAW,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnE,MAAM,WAAW,GAAW,OAAO,CAAC,OAAO,CAAC;gBAC5C,MAAM,UAAU,GAAW,MAAM,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;gBACxF,MAAM,WAAW,GAAW,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,uBAAuB,CAAC,CAAC;gBAC3F,MAAM,EAAE,GAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,CAAC;gBACrE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC;;0BAE3B,eAAe,IAAI,GAAG;0BACtB,WAAW;0BACX,UAAU;0BACV,WAAW;0BACX,EAAE;CAC3B,CAAC,EAAE,CAAC;aACE;YAED,sBAAsB;YACtB,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;CAuBlD,CAAC,EAAE,CAAC;SACA;QAED,6BAA6B;QAC7B,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,MAAM,UAAU,GAA2B,MAAM,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAChF,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,kBAAkB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC;SACpF;QAED,eAAe;QACf,IAAI,KAAK,GAAW,IAAI,CAAC;QACzB,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,IAAI,OAAO,IAAI,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC9B,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACtD;YACD,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC;SAChB;aAAM,IAAI,IAAI,CAAC,CAAC,EAAE;YACjB,KAAK,GAAG,iBAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;SACpD;aAAM;YACL,KAAK,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,KAAK,EAAE;gBACV,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC;aAC1B;SACF;QAED,iBAAiB;QACjB,IAAI,OAAO,GAAQ,IAAI,CAAC;QACxB,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAY,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;SAClE;aAAM,IAAI,IAAI,CAAC,OAAO,EAAE;YACvB,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACpC;aAAM;YACL,OAAO,GAAG,EAAE,CAAC;SACd;QAED,0BAA0B;QAC1B,OAAO,CAAC,iDAAuB,CAAC,GAAG,IAAI,CAAC,uBAAuB,CAAC;QAChE,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,OAAO,CAAC,iDAAuB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;SAC3C;QAED,sBAAsB;QACtB,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,OAAO,CAAC,yCAAmB,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;SACvC;QAED,iBAAiB;QACjB,OAAO,CAAC,GAAG,GAAG,IAAI,4BAAY,CAAC,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,IAAI,MAAM,EAAE,CAAC,CAAC;QAE5D,sBAAsB;QACtB,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,OAAO,CAAC,yCAAoB,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAClD;QAED,gBAAgB;QAChB,IAAI,IAAI,CAAC,CAAC,EAAE;YACV,OAAO,CAAC,+CAA4B,CAAC,GAAG,IAAI,qCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACxE;QAED,yBAAyB;QACzB,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,OAAO,CAAC,kDAAmB,CAAC,GAAG,OAAO,CAAC,kDAAmB,CAAC,IAAI,EAAE,CAAC;YAClE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,WAAmB,EAAE,EAAE;gBACrC,MAAM,MAAM,GAA2B,EAAE,CAAC;gBAC1C,MAAM,WAAW,GAAa,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBACxD,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC1B,MAAM,CAAC,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;iBAC9B;gBACD,MAAM,CAAC,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACnD,OAAO,CAAC,kDAAmB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC,CAAC,CAAC;SACJ;QAED,sBAAsB;QACtB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,CAAC,6CAAmB,CAAC,GAAG,IAAI,CAAC;SACrC;QAED,iBAAiB;QACjB,MAAM,WAAW,GAA+B,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAEjF,2CAA2C;QAC3C,MAAM,MAAM,GAAwB,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC;QAE/G,OAAO,EAAE,MAAM,EAAE,CAAC;IACpB,CAAC;IAEM,eAAe,CAAC,OAAe,EAAE,QAAgB;QACtD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACrC,oBAAI,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,EAAE;gBACtC,IAAI,KAAK,EAAE;oBACT,OAAO,CAAC,QAAQ,CAAC,CAAC;iBACnB;gBACD,OAAO,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;YAC1C,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,wBAAwB;QAC7B,OAAO,eAAU,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;IAC5C,CAAC;CAEF;AA1JD,0CA0JC","sourcesContent":["import {KEY_CONTEXT_DATETIME} from \"@comunica/actor-http-memento\";\nimport {KEY_CONTEXT_HTTPPROXYHANDLER, ProxyHandlerStatic} from \"@comunica/actor-http-proxy\";\nimport {IActionInit, IActorOutputInit} from \"@comunica/bus-init\";\nimport {IActorQueryOperationOutput, KEY_CONTEXT_BASEIRI} from \"@comunica/bus-query-operation\";\nimport {KEY_CONTEXT_SOURCES} from \"@comunica/bus-rdf-resolve-quad-pattern\";\nimport {LoggerPretty} from \"@comunica/logger-pretty\";\nimport {exec} from \"child_process\";\nimport {existsSync, readFileSync} from \"fs\";\nimport minimist = require('minimist');\nimport * as OS from \"os\";\nimport {Readable} from \"stream\";\nimport {\n  ActorInitSparql as ActorInitSparqlBrowser,\n  IActorInitSparqlArgs, KEY_CONTEXT_LENIENT, KEY_CONTEXT_QUERYFORMAT,\n} from \"./ActorInitSparql-browser\";\n\nexport {\n  KEY_CONTEXT_INITIALBINDINGS,\n  KEY_CONTEXT_QUERYFORMAT,\n  KEY_CONTEXT_LENIENT,\n} from \"./ActorInitSparql-browser\";\n\n/**\n * A comunica SPARQL Init Actor.\n */\nexport class ActorInitSparql extends ActorInitSparqlBrowser {\n\n  constructor(args: IActorInitSparqlArgs) {\n    super(args);\n  }\n\n  public async run(action: IActionInit): Promise<IActorOutputInit> {\n    const args = minimist(action.argv);\n    if (!args.listformats && (!this.queryString && (!(args.q || args.f) && args._.length < (args.c ? 1 : 2)\n        || args._.length < (args.c ? 0 : 1) || args.h || args.help || args.v || args.version))) {\n      // Print version information\n      if (args.v || args.version) {\n        const comunicaVersion: string = require('../package.json').version;\n        const dev: string = this.isDevelopmentEnvironment() ? '(dev)' : '';\n        const nodeVersion: string = process.version;\n        const npmVersion: string = await this.getScriptOutput('npm -v', '_NPM is unavailable_');\n        const yarnVersion: string = await this.getScriptOutput('yarn -v', '_Yarn is unavailable_');\n        const os: string = `${OS.platform()} (${OS.type()} ${OS.release()})`;\n        return { stderr: require('streamify-string')(`| software            | version\n| ------------------- | -------\n| Comunica Init Actor | ${comunicaVersion} ${dev}\n| node                | ${nodeVersion}\n| npm                 | ${npmVersion}\n| yarn                | ${yarnVersion}\n| Operating System    | ${os}\n`) };\n      }\n\n      // Print command usage\n      return { stderr: require('streamify-string')(`comunica-sparql evaluates SPARQL queries\n\nUsage:\n  comunica-sparql http://fragments.dbpedia.org/2016-04/en [-q] 'SELECT * WHERE { ?s ?p ?o }'\n  comunica-sparql http://fragments.dbpedia.org/2016-04/en [-q] '{ hero { name friends { name } } }' -i graphql\n  comunica-sparql http://fragments.dbpedia.org/2016-04/en [-f] query.sparql'\n  comunica-sparql http://fragments.dbpedia.org/2016-04/en https://query.wikidata.org/sparql ...\n  comunica-sparql hypermedia@http://fragments.dbpedia.org/2016-04/en sparql@https://query.wikidata.org/sparql ...\n\nOptions:\n  -q            evaluate the given SPARQL query string\n  -f            evaluate the SPARQL query in the given file\n  -c            use the given JSON configuration file (e.g., config.json)\n  -t            the MIME type of the output (e.g., application/json)\n  -i            the query input format (e.g., graphql, defaults to sparql)\n  -b            base IRI for the query (e.g., http://example.org/)\n  -l            sets the log level (e.g., debug, info, warn, ... defaults to warn)\n  -d            sets a datetime for querying Memento-enabled archives\n  -p            delegates all HTTP traffic through the given proxy (e.g. http://myproxy.org/?uri=)\n  --lenient     if failing requests and parsing errors should be logged instead of causing a hard crash\n  --help        print this help message\n  --listformats prints the supported MIME types\n  --version     prints version information\n`) };\n    }\n\n    // Print supported MIME types\n    if (args.listformats) {\n      const mediaTypes: {[id: string]: number} = await this.getResultMediaTypes(null);\n      return { stdout: require('streamify-string')(Object.keys(mediaTypes).join('\\n')) };\n    }\n\n    // Define query\n    let query: string = null;\n    if (args.q) {\n      if (typeof args.q !== 'string') {\n        throw new Error('The query option must be a string');\n      }\n      query = args.q;\n    } else if (args.f) {\n      query = readFileSync(args.f, { encoding: 'utf8' });\n    } else {\n      query = args._.pop();\n      if (!query) {\n        query = this.queryString;\n      }\n    }\n\n    // Define context\n    let context: any = null;\n    if (args.c) {\n      context = JSON.parse(readFileSync(args.c, { encoding: 'utf8' }));\n    } else if (this.context) {\n      context = JSON.parse(this.context);\n    } else {\n      context = {};\n    }\n\n    // Define the query format\n    context[KEY_CONTEXT_QUERYFORMAT] = this.defaultQueryInputFormat;\n    if (args.i) {\n      context[KEY_CONTEXT_QUERYFORMAT] = args.i;\n    }\n\n    // Define the base IRI\n    if (args.b) {\n      context[KEY_CONTEXT_BASEIRI] = args.b;\n    }\n\n    // Set the logger\n    context.log = new LoggerPretty({ level: args.l || 'warn' });\n\n    // Define the datetime\n    if (args.d) {\n      context[KEY_CONTEXT_DATETIME] = new Date(args.d);\n    }\n\n    // Set the proxy\n    if (args.p) {\n      context[KEY_CONTEXT_HTTPPROXYHANDLER] = new ProxyHandlerStatic(args.p);\n    }\n\n    // Add sources to context\n    if (args._.length > 0) {\n      context[KEY_CONTEXT_SOURCES] = context[KEY_CONTEXT_SOURCES] || [];\n      args._.forEach((sourceValue: string) => {\n        const source: {[id: string]: string} = {};\n        const splitValues: string[] = sourceValue.split('@', 2);\n        if (splitValues.length > 1) {\n          source.type = splitValues[0];\n        }\n        source.value = splitValues[splitValues.length - 1];\n        context[KEY_CONTEXT_SOURCES].push(source);\n      });\n    }\n\n    // Define lenient-mode\n    if (args.lenient) {\n      context[KEY_CONTEXT_LENIENT] = true;\n    }\n\n    // Evaluate query\n    const queryResult: IActorQueryOperationOutput = await this.query(query, context);\n\n    // Serialize output according to media type\n    const stdout: Readable = <Readable> (await this.resultToString(queryResult, args.t, queryResult.context)).data;\n\n    return { stdout };\n  }\n\n  public getScriptOutput(command: string, fallback: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      exec(command, (error, stdout, stderr) => {\n        if (error) {\n          resolve(fallback);\n        }\n        resolve((stdout || stderr).trimRight());\n      });\n    });\n  }\n\n  public isDevelopmentEnvironment(): boolean {\n    return existsSync(__dirname + '/../test');\n  }\n\n}\n"]}