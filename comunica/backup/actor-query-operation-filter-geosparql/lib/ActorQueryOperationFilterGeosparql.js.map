{"version":3,"file":"ActorQueryOperationFilterGeosparql.js","sourceRoot":"","sources":["ActorQueryOperationFilterGeosparql.ts"],"names":[],"mappings":"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","sourcesContent":["import * as RDF from 'rdf-js';\nimport { termToString } from 'rdf-string';\nimport { Algebra, Factory, Util } from \"sparqlalgebrajs\";\nimport { AsyncEvaluator, isExpressionError } from \"sparqlee\"; // deze sparqlee is een lokale sparqlee, het is eerder een geosparqlee!\n\nimport {\n  ActorQueryOperation, ActorQueryOperationTypedMediated, Bindings,\n  IActorQueryOperationOutputBindings,\n  IActorQueryOperationTypedMediatedArgs,\n} from \"@comunica/bus-query-operation\";\nimport { ActionContext, IActorTest } from \"@comunica/core\";\n\n/**\n * A comunica Filter Geosparql Query Operation Actor.\n */\nexport class ActorQueryOperationFilterGeosparql extends ActorQueryOperationTypedMediated<Algebra.Filter> {\n\n  constructor(args: IActorQueryOperationTypedMediatedArgs) {\n    super(args, 'filter');\n  }\n\n  public async testOperation(pattern: Algebra.Filter, context: ActionContext): Promise<IActorTest> {\n    // Will throw error for unsupported operators\n    const config = { exists: this.createExistenceResolver(context) };\n    const _ = new AsyncEvaluator(pattern.expression, config);\n    return true;\n  }\n\n  public async runOperation(pattern: Algebra.Filter, context: ActionContext) : Promise<IActorQueryOperationOutputBindings> {\n    const outputRaw = await this.mediatorQueryOperation.mediate({ operation: pattern.input, context });\n    const output = ActorQueryOperation.getSafeBindings(outputRaw);\n    ActorQueryOperation.validateQueryOutput(output, 'bindings');\n    const { variables, metadata } = output;\n\n    const expressionContext = ActorQueryOperation.getExpressionContext(context);\n    const config = {\n      ...expressionContext,\n      exists: this.createExistenceResolver(context),\n    };\n    const evaluator = new AsyncEvaluator(pattern.expression, config);\n\n    const transform = async (item: Bindings, next: any) => {\n      try {\n        const result = await evaluator.evaluateAsEBV(item);\n        if (result) {\n          bindingsStream._push(item);\n        }\n      } catch (err) {\n        if (!isExpressionError(err)) {\n          bindingsStream.emit('error', err);\n        }\n      }\n      next();\n    };\n\n    const bindingsStream = output.bindingsStream.transform<Bindings>({ transform });\n    return { type: 'bindings', bindingsStream, metadata, variables };\n  }\n\n  private createExistenceResolver(context: ActionContext):\n    (expr: Algebra.ExistenceExpression, bindings: Bindings) => Promise<boolean> {\n    return async (expr, bindings) => {\n      const operation = this.substitute(expr.input, bindings);\n\n      const outputRaw = await this.mediatorQueryOperation.mediate({ operation, context });\n      const output = ActorQueryOperation.getSafeBindings(outputRaw);\n\n      return new Promise(\n        (resolve, reject) => {\n          output.bindingsStream.on('end', () => {\n            resolve(false);\n          });\n\n          output.bindingsStream.on('error', reject);\n\n          output.bindingsStream.on('data', () => {\n            output.bindingsStream.close();\n            resolve(true);\n          });\n        })\n        .then((exists: boolean) => expr.not ? !exists : exists);\n    };\n  }\n\n  private substitute(operation: Algebra.Operation, bindings: Bindings): Algebra.Operation {\n    return Util.mapOperation(operation, {\n      path: (op: Algebra.Path, factory: Factory) => {\n        return {\n          recurse: false,\n          result: factory.createPath(\n            this.substituteSingle(op.subject, bindings),\n            op.predicate,\n            this.substituteSingle(op.object, bindings),\n            this.substituteSingle(op.graph, bindings),\n          ),\n        };\n      },\n      pattern: (op: Algebra.Pattern, factory: Factory) => {\n        return {\n          recurse: false,\n          result: factory.createPattern(\n            this.substituteSingle(op.subject, bindings),\n            this.substituteSingle(op.predicate, bindings),\n            this.substituteSingle(op.object, bindings),\n            this.substituteSingle(op.graph, bindings),\n          ),\n        };\n      },\n    });\n  }\n\n  private substituteSingle(term: RDF.Term, bindings: Bindings): RDF.Term {\n    if (term.termType === 'Variable') {\n      return bindings.get(termToString(term), term);\n    }\n    return term;\n  }\n}"]}