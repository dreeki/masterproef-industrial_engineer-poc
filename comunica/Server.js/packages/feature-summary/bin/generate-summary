#!/usr/bin/env node
/*! @license MIT Â©2014-2016 Miel Vander Sande, Ghent University - imec */
/* This script generates data summaries for a certain server dataset  */

let N3 = require('n3'),
    fs = require('fs'),
    path = require('path');

let regex = /^(http[s]?:\/?\/?[^:\/\s]+\/).*/;

let DS_NS  = 'http://semweb.mmlab.be/ns/datasummaries#',
    RDF_NS = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';

// Parse arguments
let args = process.argv.slice(2);
if (args.length < 1 || args.length > 2) {
  console.error('usage: generate-summary config.json [datasourceName]');
  process.exit(1);
}

// Init variables
let configFile = args[0],
    config = JSON.parse(fs.readFileSync(configFile)),
    datasources = config.datasources || {},
    datasourceNames = args[1] ? [args[1]] : (datasources && Object.keys(datasources));

// Configure preset URLs
let baseURL = config.baseURL ? config.baseURL.replace(/\/?$/, '/') : '/',
    baseURLRoot = baseURL.match(/^(?:https?:\/\/[^\/]+)?/)[0],
    baseURLPath = baseURL.substr(baseURLRoot.length),
    datasourceBase = baseURLPath.substr(1);

generate(datasourceNames.pop());

function generate(datasourceName) {
  // Create data source
  let datasourceConfig = datasources[datasourceName];

  try {
    // Avoid illegal URI characters in data source path
    let datasourcePath = datasourceBase + encodeURI(datasourceName);

    // Retrieve the data source class and settings
    let Datasource = require(path.join('../lib/datasources/', datasourceConfig.type)),
        settings = { ...config, ...(datasourceConfig.settings || {}) };

    // Create the data source
    let datasource = new Datasource(settings),
        url = baseURLRoot + '/' + datasourcePath;

    let writer = new N3.Writer({ prefixes: { ds: DS_NS, rdf: RDF_NS } });

    fromDataSource(url, datasource, (triple) => {
      writer.addQuad(triple);
    }, () => {
      writer.end((error, result) => {
        fs.appendFileSync(datasourceName + '.ttl', result);
        (datasourceNames.length > 0) && generate(datasourceNames.pop());
      });
    });
  }
  catch (error) {
    process.stderr.write('Could not load datasource ' + datasourceName + ': ' + error.message + '\n');
    return process.exit(1);
  }
}

function fromDataSource(uri, datasource, callback, end, chunksize) {
  let capabilities = Object.create(null);

  // Process dataset in batches when possible
  if (datasource.supportsQuery({ features: { limit: true, offset: true } }))
    processSet(chunksize || 100000);
  // Otherwise, process dataset at once
  else {
    datasource.select({}, console.log)
      .on('data', extractSummary)
      .on('end', endSummary);
  }

  // Processes DataSource in chunks
  function processSet(limit, offset) {
    offset = offset || 0;
    let count = 0;

    let stream = datasource.select({ limit: limit, offset: offset }, console.error)
      .getProperty('metadata', (metadata) => {
        let progress = Math.round((offset / metadata.totalCount) * 100);
        console.log(progress);

        stream.on('data', (triple) => {
          count++;
          extractSummary(triple);
          triple = null;
        });

        stream.on('end', () => {
          stream.removeAllListeners();
          stream = null;

          if (count < limit)
            endSummary();
          else
            setImmediate(() => { processSet(limit, offset + limit); });
        });
      });
  }

  function extractSummary(triple) {
    // Check is a capability already exists
    if (!capabilities[triple.predicate])
      capabilities[triple.predicate] = { subjectAuth: {}, objectAuth: {} };

    let subjectAuth = regex.exec(triple.subject),
        objectAuth = regex.exec(triple.object);

    if (subjectAuth !== null) {
      subjectAuth = subjectAuth[1].toLowerCase();
      capabilities[triple.predicate].subjectAuth[subjectAuth] = null;
    }

    if (objectAuth !== null) {
      objectAuth = triple.predicate === RDF_NS + 'type' ? triple.object : objectAuth[1].toLowerCase();
      capabilities[triple.predicate].objectAuth[objectAuth] = null;
    }
  }

  function endSummary() {
    let cnt = 0;

    for (let predicate in capabilities) {
      let bnode = '_:cap' + cnt++;
      callback({ subject: baseURL, predicate: DS_NS + 'capability', object: bnode });
      callback({ subject: bnode, predicate: DS_NS + 'predicate', object: predicate });

      let capability = capabilities[predicate];
      for (let subjectAuth in capability.subjectAuth)
        callback({ subject: bnode, predicate: DS_NS + 'sbjAuthority', object: subjectAuth });
      for (let objectAuth in capability.objectAuth)
        callback({ subject: bnode, predicate: DS_NS + 'objAuthority', object: objectAuth });
    }
    end();
  }
}
